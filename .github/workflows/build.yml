name: osmc

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest , macos-latest ]

    steps: 
        - uses: actions/checkout@v2
          with:
            submodules: true

          
        - uses: lukka/get-cmake@latest
        
        - name: Set up CLANG
          if: matrix.os == 'ubuntu-latest'
          uses: egor-tensin/setup-clang@v1
          with:
            version: latest
            platform: x64

        - name: Prepare MSYS on windows
          if: matrix.os == 'windows-latest'
##https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md#notes
##https://stackoverflow.com/a/64831469
          run: |
            echo "C:\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

        - name: CMAKE
          run: |
            cmake .

        - name: run make NON WINDOWS
          if: matrix.os != 'windows-latest'
          run: |
            make

        - name: run ninja windows
          if: matrix.os == 'windows-latest' 
          run: |
            ninja
        - name: ls osmc 
          run: ls oosmc-fmu

        - name: Upload artifact macos
          if: matrix.os == 'macos-latest'
          uses: actions/upload-artifact@v2
          with:
            name: darwin-x64/osmc.dylib
            path: oosmc-fmu/osmc.dylib

        - name: Upload artifact linux 
          if: matrix.os == 'ubuntu-latest'
          uses: actions/upload-artifact@v2
          with:
            name: linux-x64/libosmc.so
            path: oosmc-fmu/osmc.so

        - name: Upload artifact windows
          if: matrix.os == 'windows-latest'
          uses: actions/upload-artifact@v2
          with:
            name: win-x64/osmc.dll
            path: oosmc-fmu/osmc.so